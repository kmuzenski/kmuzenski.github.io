
{
	"posts" : [
		{"date":"April 20th, 2016", "titleName": "This", "blogPost" : "The <i>this</i> keyword in javascript refers to the object that the function where <i>this</i> is used. The <i>this</i> property is defined(given value to) when the function that it is called in is invoked. When we use <i>this</i> in the global scope all global variables are defined in the window object. <i>this</i> can not be used as a global variable while using 'strict mode'. The <i>this</i> keyword is useful to use because it allows us to use references to pass data that is defined when the function is called. This blog post is a summary of the article <a href='http://javascriptissexy.com/understand-javascripts-this-with-clarity-and-master-it/'><i>Understand JavaScriptâ€™s this With Clarity, and Master It</i></a>" },
		{"date":"April 18th, 2016", "titleName": "Scope", "blogPost" : "This blog post was written based off a w3Schools tutorial on local and global scopes. The readings can be found <a href='http://www.w3schools.com/js/js_function_closures.asp'>Here</a> This is what I learned: Javascript scope works similar to other language scopes. Variables can belong to the local or global scope. A function can access all variables defined within a function and variables in the global scope. A variable defined within a function is a local variable. Local variables can only be used in functions they are defined in. Functions can also access variables defined outside the function! Variables outside of the function are global variables. Variables created without the key word var are always global variables no matter where they are defined. Global variables will 'live' as long as the application is running. Local variables have shorter 'lives'. Local variables are only 'alive' when the function is invoked, then they are deleted when the function is finished."},
		{"date":"April 18th, 2016", "titleName": "Benefits of Prototypal Inheritance", "blogPost": "This blog post was written based on a forum found on stackoverflow.com <a href='http://stackoverflow.com/questions/2800964/benefits-of-prototypal-inheritance-over-classical'>Benefits of Prototypal Inheritance</a>. This is what I learned: Prototypal inheritance is beneficial for many reasons. The main reasons are its simple, dynamic, powerful, and allows us to use less redundent code. Prototypal inheritance is when objects inherit properties form other objects. This makes the inhertiance process much more simplified compared to other languages. To create an object using prototypal inheritance we first create a brand new object, then we clone the existing object and extend it. We can create helper functions to create constructors and reduce the amount of code we need to create new objects."},
		{"date":"April 10th, 2016", "titleName":"Slide Show", "blogPost":"I added in a slide show of my featured ecommerce project! The slideshow is made with javascript functions!"},
		{"date":"April 9th, 2016", "titleName": "Functionality", "blogPost":"Today project Functionality began! My blog posts are working, and are being displayed using JSON! "},
		{"date":"April 8th, 2016", "titleName":"The Begenning", "blogPost":"My portofolio set up began with basic html and css. The layout is simple and the graphics are basic."}


	]
}